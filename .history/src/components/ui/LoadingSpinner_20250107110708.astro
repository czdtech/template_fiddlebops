---
interface Props {
  size?: "sm" | "md" | "lg";
  color?: string;
  text?: string;
  showProgress?: boolean;
  ariaLabel?: string;
}

const {
  size = "md",
  color = "primary",
  text = "加载中...",
  showProgress = false,
  ariaLabel = "页面加载中",
} = Astro.props;

const sizeClasses = {
  sm: "h-6 w-6",
  md: "h-12 w-12",
  lg: "h-16 w-16",
} as const;
---

<div
  id="loading"
  role="alert"
  aria-label={ariaLabel}
  class="absolute inset-0 flex flex-col items-center justify-center bg-background-light bg-opacity-75 backdrop-blur-sm transition-opacity duration-300 z-10"
>
  <div
    class={`spinner rounded-full border-t-2 border-b-2 border-${color} ${sizeClasses[size]} mb-4`}
    role="progressbar"
    aria-valuetext={text}
  >
    <span class="sr-only" aria-live="polite">{text}</span>
  </div>

  <div class="text-text text-center">
    <p class="mb-2" aria-live="polite">{text}</p>
    {
      showProgress && (
        <div 
          class="w-48 h-2 bg-background-light rounded-full overflow-hidden"
          role="progressbar"
          aria-valuemin="0"
          aria-valuemax="100"
          aria-valuenow="0"
        >
          <div
            id="progress-bar"
            class="h-full bg-primary transition-all duration-300"
            style="width: 0%"
          />
        </div>
      )
    }
  </div>
</div>

<style>
  .spinner {
    animation: spin 1s linear infinite;
  }
  
  @keyframes spin {
    to {
      transform: rotate(360deg);
    }
  }
</style>

<script>
  let progressInterval: number;
  
  function initializeLoading() {
    const loading = document.getElementById("loading");
    const progressBar = document.getElementById("progress-bar");
    const progressContainer = progressBar?.parentElement;

    if (loading && progressBar && progressContainer) {
      let progress = 0;
      
      if (progressInterval) {
        clearInterval(progressInterval);
      }

      progressInterval = window.setInterval(() => {
        progress = Math.min(progress + 5, 90);
        progressBar.style.width = `${progress}%`;
        progressContainer.setAttribute('aria-valuenow', progress.toString());
        if (progress >= 90) {
          clearInterval(progressInterval);
        }
      }, 200);

      const iframe = document.getElementById("fiddlebops-iframe");
      if (iframe) {
        const observer = new IntersectionObserver((entries) => {
          entries.forEach(entry => {
            if (entry.isIntersecting) {
              iframe.addEventListener("load", () => {
                progress = 100;
                progressBar.style.width = "100%";
                progressContainer.setAttribute('aria-valuenow', '100');
                
                setTimeout(() => {
                  loading.style.opacity = "0";
                  loading.style.pointerEvents = "none";
                }, 300);
                
                clearInterval(progressInterval);
                observer.disconnect();
              });
            }
          });
        });
        
        observer.observe(iframe);
      }
    }
  }

  if (typeof window !== 'undefined') {
    initializeLoading();
  }
</script>

<div class="animate-spin w-5 h-5" style="display: none;">
  <svg class="w-full h-full" viewBox="0 0 24 24">
    <circle
      class="opacity-25"
      cx="12"
      cy="12"
      r="10"
      stroke="currentColor"
      stroke-width="4"></circle>
    <path
      class="opacity-75"
      fill="currentColor"
      d="M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z"
    ></path>
  </svg>
</div>
