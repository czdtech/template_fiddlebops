---
import { Image } from "astro:assets";
import type { ImageMetadata } from "astro";
import gamePreview from "/src/assets/FiddleBops.webp";
import ErrorBoundary from "../ErrorBoundary.astro";
import LoadingSpinner from "../ui/LoadingSpinner.astro";

interface Props {}
---

<section id="play-fiddlebops" class="mb-16">
  <ErrorBoundary fallback="游戏加载失败，请检查网络连接后重试" />
  <script type="application/ld+json">
    {
      "@context": "https://schema.org",
      "@type": "VideoGame",
      "name": "FiddleBops",
      "description": "一款由粉丝创作的音乐创作游戏",
      "image": {
        "@type": "ImageObject",
        "url": new URL(gamePreview, Astro.site).href,
        "width": "1200",
        "height": "630"
      },
      "url": "https://silkycell.github.io/FiddleBops/",
      "genre": "音乐游戏",
      "author": {
        "@type": "Organization",
        "name": "FiddleBops Team"
      },
      "gamePlatform": "Web Browser",
      "applicationCategory": "Game",
      "offers": {
        "@type": "Offer",
        "price": "0",
        "priceCurrency": "USD",
        "availability": "https://schema.org/InStock"
      }
    }
  </script>
  <h2 class="text-3xl font-bold font-display text-secondary mb-8 text-center">
    立即畅玩
  </h2>
  <div class="relative w-full max-w-4xl mx-auto">
    <div
      id="iframe-placeholder"
      role="presentation"
      class="absolute inset-0 flex justify-center items-center z-10 transition-opacity duration-300"
    >
      <div class="absolute inset-0 backdrop-blur-sm">
        <Image
          src={gamePreview}
          alt="FiddleBops 游戏预览"
          loading="eager"
          fetchpriority="high"
          class="w-full h-full object-cover md:object-contain"
          format="webp"
        />
        <div
          class="absolute inset-0 bg-gradient-to-t from-primary/80 via-background/50 to-background/80 backdrop-blur-sm md:backdrop-blur-none"
        >
        </div>
      </div>
      <button
        id="play-button"
        aria-label="开始游戏"
        class="relative z-20 bg-accent hover:bg-accent-dark text-text-light font-bold py-4 px-8 rounded-full shadow-lg transform hover:scale-105 transition-all duration-300 text-lg border-2 border-text-light/20 hover:border-text-light/40 pulse-animation flex items-center gap-2"
      >
        开始游戏
        <div id="loading-indicator" style="display: none;">
          <LoadingSpinner />
        </div>
      </button>
    </div>
    <div id="iframe-container" class="relative">
      <iframe
        id="fiddlebops-iframe"
        data-src="https://silkycell.github.io/FiddleBops/"
        title="FiddleBops Game"
        allowfullscreen
        loading="lazy"
        class="w-full aspect-video border-4 border-primary rounded-lg shadow-xl md:aspect-[4/3] lg:aspect-video"
        onload="this.setAttribute('data-loaded', 'true')"></iframe>
      <div
        id="orientation-warning"
        class="fixed inset-0 bg-background/90 backdrop-blur-sm z-50 flex items-center justify-center text-center p-4 md:hidden opacity-0 pointer-events-none transition-opacity duration-300"
      >
        <div class="bg-card p-6 rounded-lg max-w-sm">
          <p class="text-lg mb-4">请旋转设备到横屏模式以获得最佳游戏体验</p>
          <button
            id="dismiss-warning"
            class="bg-accent text-text-light px-4 py-2 rounded-lg"
          >
            我知道了
          </button>
        </div>
      </div>
    </div>
  </div>
</section>

<style>
  @keyframes pulse {
    0%,
    100% {
      box-shadow: 0 0 0 0 rgba(255, 255, 255, 0.4);
    }
    50% {
      box-shadow: 0 0 0 15px rgba(255, 255, 255, 0);
    }
  }

  .pulse-animation {
    animation: pulse 2s infinite;
  }
</style>

<script>
  type DOMEvent = Event & {
    currentTarget: EventTarget & HTMLElement;
  };

  const isLoading = false;

  document.addEventListener("DOMContentLoaded", () => {
    try {
      const playButton = document.getElementById("play-button");
      const iframePlaceholder = document.getElementById("iframe-placeholder");
      const fiddlebopsIframe = document.getElementById("fiddlebops-iframe");
      const loadingIndicator = document.getElementById("loading-indicator");
      const orientationWarning = document.getElementById("orientation-warning");
      const dismissWarning = document.getElementById("dismiss-warning");

      if (!playButton || !iframePlaceholder || !fiddlebopsIframe) {
        throw new Error("页面元素加载失败");
      }

      const handleOrientation = () => {
        orientationWarning?.classList.toggle(
          "opacity-0",
          window.innerWidth >= 768 || window.innerHeight <= window.innerWidth
        );
        orientationWarning?.classList.toggle(
          "pointer-events-none",
          window.innerWidth >= 768 || window.innerHeight <= window.innerWidth
        );
      };

      dismissWarning?.addEventListener("click", () => {
        orientationWarning?.classList.add("opacity-0", "pointer-events-none");
      });

      window.addEventListener("orientationchange", handleOrientation);
      window.addEventListener("resize", handleOrientation);

      const setIframeHeight = (): void => {
        if (fiddlebopsIframe instanceof HTMLIFrameElement) {
          // 使用 CSS aspect-ratio 代替 JavaScript 设置高度
          // fiddlebopsIframe.style.height = `${(fiddlebopsIframe.offsetWidth * 9) / 16}px`;
        }
      };
      // 移除 resize 监听，改用 CSS aspect-ratio
      // window.addEventListener("resize", setIframeHeight);
      setIframeHeight();

      const setLoading = (loading: boolean) => {
        isLoading = loading;
        playButton?.setAttribute("aria-busy", loading.toString());
        loadingIndicator?.classList.toggle("hidden", !loading);
        playButton.textContent = loading ? "加载中..." : "开始游戏";
      };

      playButton?.addEventListener("click", async () => {
        try {
          if (isLoading) return;
          setLoading(true);

          iframePlaceholder.style.opacity = "0";
          iframePlaceholder.style.pointerEvents = "none";

          if (fiddlebopsIframe instanceof HTMLIFrameElement) {
            const dataSrc = fiddlebopsIframe.dataset.src;
            if (!dataSrc) {
              throw new Error("游戏源地址未设置");
            }
            fiddlebopsIframe.src = dataSrc;
            fiddlebopsIframe.onerror = () => {
              setLoading(false); // 加载失败时取消加载状态
              throw new Error("游戏加载失败，请检查网络连接");
            };
            fiddlebopsIframe.focus();
          }
        } catch (error) {
          setLoading(false); // 发生错误时取消加载状态
          if (error instanceof Error) {
            window.showError(error.message);
          } else {
            window.showError("发生了未知错误");
          }
        }
      });
    } catch (error) {
      window.showError(error instanceof Error ? error.message : "发生了未知错误");
    }
  });
</script>
