---
interface Props {
  id?: string;
  announcePolite?: string;
  announceAssertive?: string;
  maxHistory?: number;
  class?: string;
}

const {
  id,
  announcePolite,
  announceAssertive,
  maxHistory = 50,
  class: className = "",
} = Astro.props;

// 验证 maxHistory 的值
if (maxHistory < 1) {
  throw new Error("maxHistory must be greater than 0");
}
---

<screen-reader-announcer
  id={id}
  data-max-history={maxHistory}
  class:list={["screen-reader-content", className]}
>
  {
    announcePolite && (
      <div
        id={`${id}-polite`}
        class="sr-announce"
        role="status"
        aria-live="polite"
        aria-atomic="true"
      >
        {announcePolite}
      </div>
    )
  }
  {
    announceAssertive && (
      <div
        id={`${id}-assertive`}
        class="sr-announce"
        role="alert"
        aria-live="assertive"
        aria-atomic="true"
      >
        {announceAssertive}
      </div>
    )
  }
</screen-reader-announcer>

<script>
  interface AnnouncementRecord {
    id: string;
    message: string;
    priority: "polite" | "assertive";
    timestamp: number;
    category?: string;
    metadata?: Record<string, unknown>;
  }

  class AnnouncementHistory {
    private records: AnnouncementRecord[] = [];
    private maxSize: number;

    constructor(maxSize = 50) {
      if (maxSize < 1) {
        throw new Error("maxSize must be greater than 0");
      }
      this.maxSize = maxSize;
    }

    add(
      record: Omit<AnnouncementRecord, "id" | "timestamp">
    ): AnnouncementRecord {
      if (!record.message) {
        throw new Error("Message is required");
      }

      const newRecord: AnnouncementRecord = {
        ...record,
        id: crypto.randomUUID(),
        timestamp: Date.now(),
      };

      this.records.unshift(newRecord);

      if (this.records.length > this.maxSize) {
        this.records.pop();
      }

      return newRecord;
    }

    getAll(): AnnouncementRecord[] {
      return [...this.records];
    }

    getByCategory(category: string): AnnouncementRecord[] {
      if (!category) {
        throw new Error("Category is required");
      }
      return this.records.filter((record) => record.category === category);
    }

    getByPriority(priority: "polite" | "assertive"): AnnouncementRecord[] {
      return this.records.filter((record) => record.priority === priority);
    }

    getByTimeRange(start: number, end: number): AnnouncementRecord[] {
      if (start > end) {
        throw new Error("Start time must be less than or equal to end time");
      }
      return this.records.filter(
        (record) => record.timestamp >= start && record.timestamp <= end
      );
    }

    clear(): void {
      this.records = [];
    }

    export(): string {
      return JSON.stringify(this.records);
    }

    import(data: string): void {
      if (!data) {
        throw new Error("Data is required");
      }

      try {
        const parsed = JSON.parse(data);
        if (!Array.isArray(parsed)) {
          throw new Error("Invalid data format");
        }
        this.records = parsed;
      } catch (error) {
        console.error("Failed to import announcement history:", error);
        throw error;
      }
    }
  }

  class ScreenReaderAnnouncer extends HTMLElement {
    private politeRegion: HTMLElement | null = null;
    private assertiveRegion: HTMLElement | null = null;
    private history: AnnouncementHistory;

    constructor() {
      super();
      const maxHistory = parseInt(this.dataset.maxHistory || "50", 10);
      this.history = new AnnouncementHistory(maxHistory);
      this.initRegions();
    }

    private initRegions() {
      this.politeRegion = this.querySelector('[aria-live="polite"]');
      this.assertiveRegion = this.querySelector('[aria-live="assertive"]');
    }

    public announce(
      message: string,
      priority: "polite" | "assertive" = "polite",
      category?: string,
      metadata?: Record<string, unknown>
    ) {
      if (!message) {
        throw new Error("Message is required");
      }

      const region =
        priority === "polite" ? this.politeRegion : this.assertiveRegion;

      if (region) {
        // 记录公告
        this.history.add({
          message,
          priority,
          category,
          metadata,
        });

        // 清空区域
        region.textContent = "";

        // 使用 setTimeout 确保屏幕阅读器能够识别内容变化
        setTimeout(() => {
          if (region) {
            region.textContent = message;
          }
        }, 100);

        // 触发自定义事件
        this.dispatchEvent(
          new CustomEvent("announcement", {
            detail: {
              message,
              priority,
              category,
              metadata,
            },
          })
        );
      }
    }

    public clear(priority?: "polite" | "assertive") {
      if (!priority || priority === "polite") {
        this.politeRegion && (this.politeRegion.textContent = "");
      }
      if (!priority || priority === "assertive") {
        this.assertiveRegion && (this.assertiveRegion.textContent = "");
      }
    }

    public getHistory(): AnnouncementRecord[] {
      return this.history.getAll();
    }

    public getHistoryByCategory(category: string): AnnouncementRecord[] {
      return this.history.getByCategory(category);
    }

    public getHistoryByPriority(
      priority: "polite" | "assertive"
    ): AnnouncementRecord[] {
      return this.history.getByPriority(priority);
    }

    public getHistoryByTimeRange(
      start: number,
      end: number
    ): AnnouncementRecord[] {
      return this.history.getByTimeRange(start, end);
    }

    public clearHistory(): void {
      this.history.clear();
    }

    public exportHistory(): string {
      return this.history.export();
    }

    public importHistory(data: string): void {
      this.history.import(data);
    }
  }

  if (!customElements.get("screen-reader-announcer")) {
    customElements.define("screen-reader-announcer", ScreenReaderAnnouncer);
  }
</script>

<style>
  .screen-reader-content {
    position: absolute;
    width: 1px;
    height: 1px;
    padding: 0;
    margin: -1px;
    overflow: hidden;
    clip: rect(0, 0, 0, 0);
    white-space: nowrap;
    border: 0;
  }

  .sr-announce {
    position: absolute;
    width: 1px;
    height: 1px;
    padding: 0;
    margin: -1px;
    overflow: hidden;
    clip: rect(0, 0, 0, 0);
    white-space: nowrap;
    border: 0;
  }
</style>
