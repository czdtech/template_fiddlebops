---
interface Props {
  fallback?: string;
}

const { fallback = "出现了一些问题，请稍后再试" } = Astro.props;
---

<div id="error-boundary" class="hidden">
  <div class="fixed inset-0 bg-background/80 backdrop-blur-sm z-50 flex items-center justify-center">
    <div class="bg-card p-6 rounded-lg shadow-xl max-w-md mx-4">
      <h3 class="text-xl font-bold text-accent mb-4">糟糕！</h3>
      <p class="text-text mb-4" id="error-message">{fallback}</p>
      <button
        onclick="window.location.reload()"
        class="bg-primary hover:bg-primary-dark text-text-light px-4 py-2 rounded-md transition-colors"
      >
        刷新页面
      </button>
    </div>
  </div>
</div>

<script>
// 定义游戏相关错误类型
class GameError extends Error {
  constructor(message: string) {
    super(message);
    this.name = 'GameError';
  }
}

// 显示错误信息的函数
function showError(message: string) {
  const errorBoundary = document.getElementById('error-boundary');
  const errorMessage = document.getElementById('error-message');
  if (errorBoundary && errorMessage) {
    errorMessage.textContent = message;
    errorBoundary.classList.remove('hidden');
  }
}

// 全局错误处理
window.addEventListener('error', (event) => {
  showError(event.message);
});

window.addEventListener('unhandledrejection', (event) => {
  showError(event.reason?.message || '发生了未知错误');
});

// 导出供其他组件使用
declare global {
  interface Window {
    GameError: typeof GameError;
    showError: typeof showError;
  }
}
window.GameError = GameError;
window.showError = showError;
</script> 