---
import { languages } from "@/i18n/config";
import {
  getLangFromUrl,
  useTranslations,
  useTranslatedPath,
} from "@/i18n/utils";
import LanguageSelectorClient from "./LanguageSelectorClient";
import type { Language } from "@/i18n/types";
import ScreenReader from "@/components/a11y/ScreenReader.astro";

const lang = getLangFromUrl(Astro.url);
const t = useTranslations(lang);
const translatePath = useTranslatedPath(lang);

// 验证语言代码
if (!Object.keys(languages).includes(lang)) {
  throw new Error(`Invalid language code: ${lang}`);
}

// 准备传递给客户端组件的数据
const props = {
  currentLang: lang as Language,
  languages,
  translations: {
    changeLanguage: t("nav.changeLanguage"),
    languageMenu: t("nav.languageMenu"),
    currentLanguage: t("nav.currentLanguage"),
  },
  paths: Object.keys(languages).reduce<Record<Language, string>>(
    (acc, code) => ({
      ...acc,
      [code as Language]: translatePath("/", code as Language),
    }),
    {} as Record<Language, string>
  ),
};
---

<div class="language-selector-wrapper">
  <LanguageSelectorClient {...props} />
  <ScreenReader>
    {t("nav.currentLanguage")}: {languages[lang as Language].name}
  </ScreenReader>
</div>

<style>
  .language-selector-wrapper {
    position: relative;
  }

  :global(.language-selector) {
    position: relative;
  }

  :global(.language-button) {
    display: flex;
    align-items: center;
    gap: var(--spacing-1);
    padding: var(--spacing-2) var(--spacing-3);
    font-size: var(--font-size-sm);
    color: var(--color-text);
    background: var(--color-background-light);
    border: 1px solid var(--color-border);
    border-radius: var(--radius-md);
    cursor: pointer;
    transition: var(--transition-all);
    outline: none;
  }

  :global(.language-button:hover),
  :global(.language-button:focus-visible) {
    background: var(--color-background-lighter);
  }

  :global(.language-button:focus-visible) {
    outline: 2px solid var(--color-primary);
    outline-offset: 2px;
  }

  :global(.arrow) {
    transition: var(--transition-transform);
  }

  :global(.language-selector[data-open="true"] .arrow) {
    transform: rotate(180deg);
  }

  :global(.language-dropdown) {
    position: absolute;
    top: 100%;
    right: 0;
    margin-top: var(--spacing-2);
    padding: var(--spacing-2);
    background: var(--color-background-light);
    border: 1px solid var(--color-border);
    border-radius: var(--radius-md);
    box-shadow: var(--shadow-md);
    opacity: 0;
    visibility: hidden;
    transform: translateY(-10px);
    transition: var(--transition-all);
  }

  :global(.language-selector[data-open="true"] .language-dropdown) {
    opacity: 1;
    visibility: visible;
    transform: translateY(0);
  }

  :global(.language-link) {
    display: block;
    padding: var(--spacing-2) var(--spacing-4);
    color: var(--color-text-muted);
    text-decoration: none;
    white-space: nowrap;
    transition: var(--transition-all);
    outline: none;
  }

  :global(.language-link:hover),
  :global(.language-link:focus-visible) {
    color: var(--color-text);
    background: var(--color-background-lighter);
  }

  :global(.language-link:focus-visible) {
    outline: 2px solid var(--color-primary);
    outline-offset: -2px;
  }

  :global(.language-link.active) {
    color: var(--color-primary);
    background: var(--color-background-lighter);
  }

  /* 响应式设计 */
  @media (max-width: 768px) {
    :global(.language-button) {
      padding: var(--spacing-1) var(--spacing-2);
      font-size: var(--font-size-xs);
    }

    :global(.language-dropdown) {
      right: -1rem;
    }
  }

  /* 减少动画 */
  @media (prefers-reduced-motion: reduce) {
    :global(.language-button),
    :global(.language-link),
    :global(.arrow),
    :global(.language-dropdown) {
      transition: none;
    }
  }
</style>
