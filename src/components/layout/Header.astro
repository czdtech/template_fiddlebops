---
import { siteConfig } from "@/config/site";
import {
  getLangFromUrl,
  useTranslations,
  useTranslatedPath,
} from "@/i18n/utils";
import ScreenReader from "@/components/a11y/ScreenReader.astro";
import Container from "@/components/layout/Container.astro";
import LanguageSelector from "@/components/ui/LanguageSelector.astro";

const lang = getLangFromUrl(Astro.url);
const t = useTranslations(lang);
const translatePath = useTranslatedPath(lang);
---

<header class="header" role="banner">
  <Container>
    <nav class="nav" aria-label={t("nav.mainNavigation")}>
      <a href={translatePath("/")} class="logo" aria-label={siteConfig.name}>
        <img src="/logo.svg" alt={siteConfig.name} width="32" height="32" />
        <span>FiddleBops</span>
      </a>

      <div class="nav-center" role="menubar">
        <a
          href={translatePath("/")}
          class="nav-link"
          role="menuitem"
          aria-current={Astro.url.pathname === "/" ? "page" : undefined}
        >
          {t("nav.home")}
        </a>
        <a href={translatePath("/#game")} class="nav-link" role="menuitem">
          {t("nav.game")}
        </a>
        <a href={translatePath("/#features")} class="nav-link" role="menuitem">
          {t("nav.features")}
        </a>
        <a href={translatePath("/#faq")} class="nav-link" role="menuitem">
          {t("nav.faq")}
        </a>
      </div>

      <div class="nav-right">
        <LanguageSelector />
        <button
          class="menu-button"
          aria-label={t("nav.toggleMenu")}
          aria-expanded="false"
          aria-controls="mobile-nav"
        >
          <span class="menu-icon"></span>
        </button>
      </div>
    </nav>
  </Container>
  <ScreenReader id="header-announcer" />
</header>

<style>
  .header {
    position: sticky;
    top: 0;
    z-index: 50;
    background: var(--color-background);
    border-bottom: 1px solid var(--color-border);
    backdrop-filter: blur(8px);
    margin-bottom: 0;
  }

  .nav {
    display: flex;
    align-items: center;
    justify-content: space-between;
    height: 4rem;
    padding: 0;
    margin: 0;
  }

  .logo {
    display: flex;
    align-items: center;
    gap: 0.5rem;
    font-weight: 600;
    color: var(--color-text);
    text-decoration: none;
    outline: none;
  }

  .logo:focus-visible {
    outline: 2px solid var(--color-primary);
    outline-offset: 4px;
    border-radius: 4px;
  }

  .nav-center {
    display: flex;
    align-items: center;
    gap: 2rem;
  }

  .nav-link {
    color: var(--color-text-muted);
    text-decoration: none;
    font-weight: 500;
    transition: color 0.2s;
    outline: none;
  }

  .nav-link:hover,
  .nav-link:focus-visible {
    color: var(--color-text);
  }

  .nav-link:focus-visible {
    outline: 2px solid var(--color-primary);
    outline-offset: 4px;
    border-radius: 4px;
  }

  .nav-link[aria-current="page"] {
    color: var(--color-primary);
  }

  .nav-right {
    display: flex;
    align-items: center;
    gap: 1rem;
  }

  .menu-button {
    display: none;
    padding: 0.5rem;
    color: var(--color-text);
    background: transparent;
    border: none;
    cursor: pointer;
    outline: none;
  }

  .menu-icon {
    display: block;
    width: 24px;
    height: 2px;
    background: currentColor;
    position: relative;
    transition: background-color 0.2s;
  }

  .menu-icon::before,
  .menu-icon::after {
    content: "";
    position: absolute;
    left: 0;
    width: 100%;
    height: 2px;
    background: currentColor;
    transition: transform 0.2s;
  }

  .menu-icon::before {
    top: -6px;
  }

  .menu-icon::after {
    bottom: -6px;
  }

  .menu-button[aria-expanded="true"] .menu-icon {
    background: transparent;
  }

  .menu-button[aria-expanded="true"] .menu-icon::before {
    transform: translateY(6px) rotate(45deg);
  }

  .menu-button[aria-expanded="true"] .menu-icon::after {
    transform: translateY(-6px) rotate(-45deg);
  }

  @media (max-width: 768px) {
    .nav-center {
      display: none;
    }

    .menu-button {
      display: block;
    }
  }
</style>

<script>
  // 移动端菜单交互逻辑
  const menuButton = document.querySelector(".menu-button");
  const navCenter = document.querySelector(".nav-center");

  menuButton?.addEventListener("click", () => {
    const isExpanded = menuButton.getAttribute("aria-expanded") === "true";
    menuButton.setAttribute("aria-expanded", (!isExpanded).toString());
    navCenter?.classList.toggle("show");
  });
</script>
