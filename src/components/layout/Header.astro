---
import { siteConfig } from "@/config/site";
import {
  getLangFromUrl,
  useTranslations,
  useTranslatedPath,
} from "@/i18n/utils";
import { languages } from "@/i18n/config";
import ScreenReader from "@/components/a11y/ScreenReader.astro";

const lang = getLangFromUrl(Astro.url);
const t = useTranslations(lang);
const translatePath = useTranslatedPath(lang);
---

<header class="header" role="banner">
  <div class="container">
    <nav class="nav" aria-label={t("nav.mainNavigation")}>
      <a href={translatePath("/")} class="logo" aria-label={siteConfig.name}>
        <img src="/logo.svg" alt={siteConfig.name} width="32" height="32" />
        <span>FiddleBops</span>
      </a>

      <div class="nav-center" role="menubar">
        <a
          href={translatePath("/")}
          class="nav-link"
          role="menuitem"
          aria-current={Astro.url.pathname === "/" ? "page" : undefined}
        >
          {t("nav.home")}
        </a>
        <a href={translatePath("/#game")} class="nav-link" role="menuitem">
          {t("nav.game")}
        </a>
        <a href={translatePath("/#features")} class="nav-link" role="menuitem">
          {t("nav.features")}
        </a>
        <a href={translatePath("/#faq")} class="nav-link" role="menuitem">
          {t("nav.faq")}
        </a>
      </div>

      <div class="nav-right">
        <div class="language-selector">
          <button
            class="language-button"
            aria-expanded="false"
            aria-haspopup="true"
            aria-controls="language-dropdown"
            aria-label={t("nav.changeLanguage")}
          >
            <span>{languages[lang]}</span>
            <svg
              class="arrow"
              viewBox="0 0 24 24"
              width="16"
              height="16"
              aria-hidden="true"
            >
              <path fill="currentColor" d="M7 10l5 5 5-5z"></path>
            </svg>
          </button>
          <div
            id="language-dropdown"
            class="language-dropdown"
            role="menu"
            aria-label={t("nav.languageMenu")}
          >
            {
              Object.entries(languages).map(([code, label]) => (
                <a
                  href={translatePath("/", code as any)}
                  class:list={["language-link", { active: code === lang }]}
                  role="menuitem"
                  aria-current={code === lang ? "true" : undefined}
                >
                  {label}
                </a>
              ))
            }
          </div>
        </div>

        <button
          class="menu-button"
          aria-label={t("nav.toggleMenu")}
          aria-expanded="false"
          aria-controls="mobile-nav"
        >
          <span class="menu-icon"></span>
        </button>
      </div>
    </nav>
  </div>
  <ScreenReader id="header-announcer" />
</header>

<style>
  .header {
    position: sticky;
    top: 0;
    z-index: 50;
    background: var(--color-background);
    border-bottom: 1px solid var(--color-border);
    backdrop-filter: blur(8px);
    margin-bottom: 0;
  }

  .container {
    max-width: 1200px;
    margin: 0 auto;
    padding: 0 1rem;
  }

  .nav {
    display: flex;
    align-items: center;
    justify-content: space-between;
    height: 4rem;
    padding: 0;
    margin: 0;
  }

  .logo {
    display: flex;
    align-items: center;
    gap: 0.5rem;
    font-weight: 600;
    color: var(--color-text);
    text-decoration: none;
    outline: none;
  }

  .logo:focus-visible {
    outline: 2px solid var(--color-primary);
    outline-offset: 4px;
    border-radius: 4px;
  }

  .nav-center {
    display: flex;
    align-items: center;
    gap: 2rem;
  }

  .nav-link {
    color: var(--color-text-muted);
    text-decoration: none;
    font-weight: 500;
    transition: color 0.2s;
    outline: none;
  }

  .nav-link:hover,
  .nav-link:focus-visible {
    color: var(--color-text);
  }

  .nav-link:focus-visible {
    outline: 2px solid var(--color-primary);
    outline-offset: 4px;
    border-radius: 4px;
  }

  .nav-link[aria-current="page"] {
    color: var(--color-primary);
  }

  .nav-right {
    display: flex;
    align-items: center;
    gap: 1rem;
  }

  .language-selector {
    position: relative;
  }

  .language-button {
    display: flex;
    align-items: center;
    gap: 0.25rem;
    padding: 0.5rem 0.75rem;
    font-size: 0.875rem;
    color: var(--color-text);
    background: var(--color-background-light);
    border: 1px solid var(--color-border);
    border-radius: 0.5rem;
    cursor: pointer;
    transition: all 0.2s;
    outline: none;
  }

  .language-button:hover,
  .language-button:focus-visible {
    background: var(--color-background-lighter);
  }

  .language-button:focus-visible {
    outline: 2px solid var(--color-primary);
    outline-offset: 2px;
  }

  .arrow {
    transition: transform 0.2s;
  }

  .language-selector[data-open="true"] .arrow {
    transform: rotate(180deg);
  }

  .language-dropdown {
    position: absolute;
    top: 100%;
    right: 0;
    margin-top: 0.5rem;
    padding: 0.5rem;
    background: var(--color-background-light);
    border: 1px solid var(--color-border);
    border-radius: 0.5rem;
    box-shadow: 0 4px 6px -1px rgba(0, 0, 0, 0.1);
    opacity: 0;
    visibility: hidden;
    transform: translateY(-10px);
    transition: all 0.2s;
  }

  .language-selector[data-open="true"] .language-dropdown {
    opacity: 1;
    visibility: visible;
    transform: translateY(0);
  }

  .language-link {
    display: block;
    padding: 0.5rem 1rem;
    color: var(--color-text-muted);
    text-decoration: none;
    white-space: nowrap;
    transition: all 0.2s;
    outline: none;
  }

  .language-link:hover,
  .language-link:focus-visible {
    color: var(--color-text);
    background: var(--color-background-lighter);
  }

  .language-link:focus-visible {
    outline: 2px solid var(--color-primary);
    outline-offset: -2px;
  }

  .language-link.active {
    color: var(--color-primary);
    background: var(--color-primary-lighter);
  }

  .menu-button {
    display: none;
    padding: 0.5rem;
    background: none;
    border: none;
    cursor: pointer;
    outline: none;
  }

  .menu-button:focus-visible {
    outline: 2px solid var(--color-primary);
    outline-offset: 2px;
    border-radius: 4px;
  }

  .menu-icon {
    display: block;
    width: 24px;
    height: 2px;
    background: var(--color-text);
    position: relative;
    transition: background-color 0.2s;
  }

  .menu-icon::before,
  .menu-icon::after {
    content: "";
    position: absolute;
    width: 100%;
    height: 2px;
    background: var(--color-text);
    transition: transform 0.2s;
  }

  .menu-icon::before {
    top: -6px;
  }

  .menu-icon::after {
    bottom: -6px;
  }

  [data-menu-open="true"] .menu-icon {
    background: transparent;
  }

  [data-menu-open="true"] .menu-icon::before {
    transform: translateY(6px) rotate(45deg);
  }

  [data-menu-open="true"] .menu-icon::after {
    transform: translateY(-6px) rotate(-45deg);
  }

  @media (max-width: 768px) {
    .nav-center {
      position: fixed;
      top: 4rem;
      left: 0;
      right: 0;
      flex-direction: column;
      gap: 0;
      background: var(--color-background);
      border-bottom: 1px solid var(--color-border);
      transform: translateY(-100%);
      opacity: 0;
      visibility: hidden;
      transition: all 0.3s;
    }

    [data-menu-open="true"] .nav-center {
      transform: translateY(0);
      opacity: 1;
      visibility: visible;
    }

    .nav-link {
      display: block;
      padding: 1rem;
      width: 100%;
      text-align: center;
      border-bottom: 1px solid var(--color-border);
    }

    .nav-link:last-child {
      border-bottom: none;
    }

    .menu-button {
      display: block;
    }

    .language-selector {
      position: static;
    }

    .language-dropdown {
      position: fixed;
      top: 4rem;
      left: 0;
      right: 0;
      margin: 0;
      border-radius: 0;
      background: var(--color-background);
    }

    .language-link {
      text-align: center;
      padding: 1rem;
      border-bottom: 1px solid var(--color-border);
    }

    .language-link:last-child {
      border-bottom: none;
    }
  }
</style>

<script>
  class HeaderController {
    private header: HTMLElement;
    private menuButton: HTMLButtonElement;
    private languageSelector: HTMLElement;
    private languageButton: HTMLButtonElement;
    private languageDropdown: HTMLElement;
    private announcer: HTMLElement;

    constructor() {
      this.header = document.querySelector(".header") as HTMLElement;
      this.menuButton = this.header.querySelector(
        ".menu-button"
      ) as HTMLButtonElement;
      this.languageSelector = this.header.querySelector(
        ".language-selector"
      ) as HTMLElement;
      this.languageButton = this.languageSelector.querySelector(
        ".language-button"
      ) as HTMLButtonElement;
      this.languageDropdown = this.languageSelector.querySelector(
        ".language-dropdown"
      ) as HTMLElement;
      this.announcer = document.querySelector(
        "screen-reader-announcer"
      ) as HTMLElement;
      this.init();
    }

    private init() {
      this.setupMenuButton();
      this.setupLanguageSelector();
      this.setupKeyboardNavigation();
    }

    private setupMenuButton() {
      this.menuButton.addEventListener("click", () => {
        const isOpen = this.header.getAttribute("data-menu-open") === "true";
        this.toggleMenu(!isOpen);
      });
    }

    private setupLanguageSelector() {
      this.languageButton.addEventListener("click", (e) => {
        e.stopPropagation();
        const isOpen =
          this.languageSelector.getAttribute("data-open") === "true";
        this.toggleLanguageMenu(!isOpen);
      });

      document.addEventListener("click", (e) => {
        if (!this.languageSelector.contains(e.target as Node)) {
          this.toggleLanguageMenu(false);
        }
      });

      document.addEventListener("keydown", (e) => {
        if (e.key === "Escape") {
          this.toggleLanguageMenu(false);
          this.toggleMenu(false);
        }
      });
    }

    private setupKeyboardNavigation() {
      const navLinks = Array.from(this.header.querySelectorAll(".nav-link"));
      const languageLinks = Array.from(
        this.languageSelector.querySelectorAll(".language-link")
      );

      navLinks.forEach((link, index) => {
        link.addEventListener("keydown", (e: Event) => {
          const keyEvent = e as KeyboardEvent;
          const key = keyEvent.key;
          if (key === "ArrowRight" || key === "ArrowDown") {
            e.preventDefault();
            const nextIndex = (index + 1) % navLinks.length;
            (navLinks[nextIndex] as HTMLElement).focus();
          } else if (key === "ArrowLeft" || key === "ArrowUp") {
            e.preventDefault();
            const prevIndex = index === 0 ? navLinks.length - 1 : index - 1;
            (navLinks[prevIndex] as HTMLElement).focus();
          }
        });
      });

      languageLinks.forEach((link, index) => {
        const self = this;
        link.addEventListener("keydown", (e: Event) => {
          const keyEvent = e as KeyboardEvent;
          const key = keyEvent.key;
          if (key === "ArrowDown") {
            e.preventDefault();
            const nextIndex = (index + 1) % languageLinks.length;
            (languageLinks[nextIndex] as HTMLElement).focus();
          } else if (key === "ArrowUp") {
            e.preventDefault();
            const prevIndex =
              index === 0 ? languageLinks.length - 1 : index - 1;
            (languageLinks[prevIndex] as HTMLElement).focus();
          } else if (key === "Escape") {
            e.preventDefault();
            self.toggleLanguageMenu(false);
            self.languageButton.focus();
          }
        });
      });
    }

    private toggleMenu(show: boolean) {
      this.header.setAttribute("data-menu-open", show.toString());
      this.menuButton.setAttribute("aria-expanded", show.toString());
      (this.announcer as any)?.announce?.(
        show ? "导航菜单已打开" : "导航菜单已关闭",
        "polite"
      );
    }

    private toggleLanguageMenu(show: boolean) {
      this.languageSelector.setAttribute("data-open", show.toString());
      this.languageButton.setAttribute("aria-expanded", show.toString());
      (this.announcer as any)?.announce?.(
        show ? "语言选择菜单已打开" : "语言选择菜单已关闭",
        "polite"
      );

      if (show) {
        const firstLink = this.languageDropdown.querySelector(
          ".language-link"
        ) as HTMLElement;
        firstLink?.focus();
      }
    }
  }

  // 初始化Header控制器
  new HeaderController();
</script>
