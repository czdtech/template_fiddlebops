---
import { getLangFromUrl, useTranslations } from "@/i18n/utils";
import ScreenReader from "@/components/a11y/ScreenReader.astro";
import { Image } from "astro:assets";
import { defaultGameConfig } from "@/config/game";

const lang = getLangFromUrl(Astro.url);
const t = useTranslations(lang);
---

<!-- DNS 预解析 -->
<link rel="dns-prefetch" href="https://silkycell.github.io" />

<section
  id="game"
  class="game-section"
  role="region"
  aria-labelledby="game-title"
>
  <div class="container">
    <div class="game-container">
      <div class="game-cover" data-visible="true">
        <Image
          src={defaultGameConfig.previewImage}
          alt=""
          width={1200}
          height={675}
          class="cover-background"
          loading="eager"
          quality={60}
          format="webp"
        />
        <div class="cover-overlay" role="presentation"></div>
        <div class="cover-content">
          <h2 id="game-title" class="cover-title">{t("game.frameTitle")}</h2>
          <p class="cover-description">{t("game.frameDescription")}</p>
          <button class="start-button" aria-label={t("nav.startGame")}>
            <span>{t("nav.startGame")}</span>
            <svg
              class="play-icon"
              viewBox="0 0 24 24"
              width="24"
              height="24"
              aria-hidden="true"
            >
              <path fill="currentColor" d="M8 5v14l11-7z"></path>
            </svg>
          </button>
        </div>
      </div>

      <div
        class="game-wrapper"
        role="application"
        aria-label={t("game.frameTitle")}
      >
        <div
          class="error-message"
          style="display: none;"
          role="alert"
          aria-live="assertive"
        >
          <p>{t("game.error")}</p>
          <button class="retry-button" aria-label={t("game.retry")}>
            {t("game.retry")}
          </button>
        </div>

        <iframe
          data-src={defaultGameConfig.url}
          title={t("game.frameTitle")}
          class="game-frame"
          tabindex="0"
          allow="autoplay; fullscreen"
          loading="lazy"
          style="visibility: hidden;"
          aria-label={t("game.frameDescription")}></iframe>
      </div>

      <div class="game-controls" aria-label={t("game.controls")}>
        <button
          class="skip-game"
          onclick="document.querySelector('#features').focus()"
        >
          {t("game.skipGame")}
        </button>

        <div class="game-instructions-text">
          <h3>{t("game.instructions.title")}</h3>
          <div class="instructions-grid">
            <div class="instruction-block">
              <h4>{t("game.instructions.createTitle")}</h4>
              <ul>
                {
                  defaultGameConfig.controls.desktop.map((control) => (
                    <li>{control}</li>
                  ))
                }
              </ul>
            </div>
            <div class="instruction-block">
              <h4>{t("game.instructions.soundTitle")}</h4>
              <ul>
                <li>{t("game.category.beats")}</li>
                <li>{t("game.category.effects")}</li>
                <li>{t("game.category.melodies")}</li>
                <li>{t("game.category.voices")}</li>
              </ul>
            </div>
            <div class="instruction-block">
              <h4>{t("game.instructions.controlTitle")}</h4>
              <ul>
                <li>{t("game.instructions.desktop")}</li>
                <li>{t("game.instructions.mobile")}</li>
                <li>{t("game.instructions.unlock")}</li>
              </ul>
            </div>
          </div>
        </div>
      </div>
    </div>
  </div>

  <ScreenReader id="game-announcer" />
</section>

<script>
  import { GameController } from "./game/GameController";
  new GameController();
</script>

<style>
  .game-section {
    padding: 2rem 0;
    background: var(--color-background);
  }

  .container {
    width: 100%;
    max-width: 1200px;
    margin: 0 auto;
    padding: 0 1rem;
  }

  .game-container {
    position: relative;
    width: 100%;
    max-width: 1024px;
    margin: 0 auto;
    background: var(--color-background-light);
    border-radius: 1rem;
    overflow: hidden;
    box-shadow: 0 4px 6px -1px rgba(0, 0, 0, 0.1);
  }

  .game-wrapper {
    position: relative;
    width: 100%;
    padding-top: 56.25%;
    border-radius: 0.5rem 0.5rem 0 0;
    overflow: hidden;
    background: rgba(26, 26, 26, 0.7);
  }

  .game-loading {
    position: absolute;
    top: 50%;
    left: 50%;
    transform: translate(-50%, -50%);
    display: flex;
    flex-direction: column;
    align-items: center;
    gap: 1rem;
    z-index: 20;
    background: rgba(0, 0, 0, 0.7);
    padding: 2rem;
    border-radius: 1rem;
  }

  .spinner {
    width: 40px;
    height: 40px;
    border: 4px solid rgba(255, 255, 255, 0.1);
    border-left-color: var(--color-primary);
    border-radius: 50%;
    animation: spin 1s linear infinite;
  }

  @keyframes spin {
    to {
      transform: rotate(360deg);
    }
  }

  .loading-text {
    color: white;
    font-size: 1.125rem;
    text-align: center;
    text-shadow: 0 1px 2px rgba(0, 0, 0, 0.1);
    margin: 0;
  }

  .game-frame {
    position: absolute;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
    border: none;
    background: transparent;
  }

  .game-frame:focus {
    outline: 3px solid var(--color-primary);
    outline-offset: -3px;
  }

  .game-controls {
    padding: 1.5rem;
    background: var(--color-background-lighter);
    border-top: 1px solid var(--color-border);
  }

  .skip-game {
    position: absolute;
    left: -9999px;
    width: 1px;
    height: 1px;
    overflow: hidden;
  }

  .skip-game:focus {
    position: static;
    width: auto;
    height: auto;
    padding: 0.5rem 1rem;
    margin-bottom: 1rem;
    background: var(--color-primary);
    color: white;
    border: none;
    border-radius: 0.5rem;
    cursor: pointer;
  }

  .game-instructions-text {
    color: var(--color-text-muted);
  }

  .game-instructions-text h3 {
    margin-bottom: 1rem;
    color: var(--color-text);
    font-size: 1.25rem;
    text-align: center;
  }

  .game-instructions-text h4 {
    color: var(--color-text);
    font-size: 1rem;
    margin-bottom: 0.5rem;
  }

  .instructions-grid {
    display: grid;
    grid-template-columns: repeat(auto-fit, minmax(200px, 1fr));
    gap: 1.5rem;
    margin-top: 1rem;
  }

  .instruction-block {
    background: var(--color-background);
    padding: 1rem;
    border-radius: 0.5rem;
    border: 1px solid var(--color-border);
  }

  .instruction-block ul {
    list-style: none;
    padding: 0;
  }

  .instruction-block li {
    position: relative;
    padding-left: 1.25rem;
    margin-bottom: 0.5rem;
    font-size: 0.875rem;
    line-height: 1.4;
  }

  .instruction-block li::before {
    content: "•";
    position: absolute;
    left: 0;
    color: var(--color-primary);
  }

  /* 游戏封面样式 */
  .game-cover {
    position: absolute;
    top: 0;
    left: 0;
    right: 0;
    padding-top: 56.25%;
    padding-bottom: 2rem;
    display: flex;
    align-items: center;
    justify-content: center;
    z-index: 15;
    opacity: 1;
    visibility: visible;
    overflow: hidden;
    border-radius: 0.5rem 0.5rem 0 0;
    transform: none;
  }

  .cover-background {
    position: absolute;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
    object-fit: cover;
    filter: blur(4px) brightness(1.2);
    transform: scale(1.1);
    z-index: 1;
  }

  .cover-overlay {
    position: absolute;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
    background: linear-gradient(
      to bottom right,
      rgba(0, 0, 0, 0.6),
      rgba(0, 0, 0, 0.7)
    );
    z-index: 2;
  }

  .cover-content {
    position: absolute;
    top: 50%;
    left: 50%;
    transform: translate(-50%, -50%);
    text-align: center;
    color: white;
    padding: 3rem 2rem;
    max-width: 600px;
    width: 100%;
    z-index: 3;
    opacity: 1;
    transition: transform 0.3s ease-out;
    display: flex;
    flex-direction: column;
    align-items: center;
    justify-content: center;
    min-height: 60%;
  }

  @media (max-width: 640px) {
    .cover-content {
      padding: 2rem 1rem;
      min-height: 70%;
    }
  }

  .cover-title {
    font-size: clamp(1.5rem, 4vw, 2.5rem);
    font-weight: bold;
    margin-bottom: 1.5rem;
    line-height: 1.2;
    text-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);
  }

  .cover-description {
    font-size: clamp(1rem, 2vw, 1.125rem);
    margin-bottom: 2.5rem;
    opacity: 0.9;
    text-shadow: 0 1px 2px rgba(0, 0, 0, 0.1);
    max-width: 80%;
  }

  .start-button {
    display: inline-flex;
    align-items: center;
    gap: 0.5rem;
    padding: 1rem 2rem;
    font-size: 1.125rem;
    font-weight: 600;
    color: var(--color-primary);
    background: white;
    border: none;
    border-radius: 9999px;
    cursor: pointer;
    transition: all 0.2s ease;
    margin-top: auto;
    position: relative;
    z-index: 4;
  }

  .start-button:hover {
    transform: translateY(-2px);
    box-shadow: 0 4px 12px rgba(0, 0, 0, 0.1);
  }

  .start-button:focus-visible {
    outline: 2px solid white;
    outline-offset: 2px;
  }

  .play-icon {
    transition: transform 0.2s ease;
  }

  .start-button:hover .play-icon {
    transform: translateX(2px);
  }

  .error-message {
    position: absolute;
    top: 50%;
    left: 50%;
    transform: translate(-50%, -50%);
    text-align: center;
    background: rgba(0, 0, 0, 0.8);
    padding: 2rem;
    border-radius: 1rem;
    color: white;
    z-index: 20;
  }

  .error-message p {
    margin-bottom: 1rem;
    font-size: 1.125rem;
  }

  .error-message button {
    padding: 0.5rem 1.5rem;
    background: var(--color-primary);
    border: none;
    border-radius: 0.5rem;
    color: white;
    cursor: pointer;
    transition: all 0.2s ease;
  }

  .error-message button:hover {
    background: var(--color-primary-dark);
  }

  .game-cover[data-visible="false"] {
    opacity: 0;
    visibility: hidden;
    pointer-events: none;
    transition: all 0.3s ease-out;
  }

  .game-cover[data-visible="false"] .cover-background {
    transform: scale(1.2);
    transition: transform 0.5s ease-out;
  }

  .game-cover[data-visible="false"] .cover-content {
    transform: translate(-50%, -40%);
    opacity: 0;
    transition: all 0.3s ease-out;
  }

  @media (max-width: 768px) {
    .game-section {
      padding: 1.5rem 0;
    }

    .game-container {
      border-radius: 0.75rem;
    }

    .game-instructions-text h3 {
      font-size: 1.125rem;
    }

    .instructions-grid {
      grid-template-columns: 1fr;
      gap: 1rem;
    }

    .instruction-block {
      padding: 0.875rem;
    }

    .instruction-block h4 {
      font-size: 0.875rem;
    }

    .instruction-block li {
      font-size: 0.75rem;
      margin-bottom: 0.375rem;
    }
  }

  @media (max-width: 480px) {
    .game-section {
      padding: 1rem 0;
    }

    .game-container {
      border-radius: 0.5rem;
    }

    .cover-title {
      font-size: 1.25rem;
      margin-bottom: 0.75rem;
    }

    .cover-description {
      font-size: 0.875rem;
      margin-bottom: 1.5rem;
    }

    .start-button {
      padding: 0.5rem 1rem;
      font-size: 0.875rem;
    }

    .game-instructions-text {
      padding: 0.75rem;
    }

    .game-loading {
      padding: 1.5rem;
    }

    .spinner {
      width: 32px;
      height: 32px;
      border-width: 3px;
    }

    .loading-text {
      font-size: 1rem;
    }
  }
</style>
