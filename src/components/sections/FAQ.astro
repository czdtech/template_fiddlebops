---
import { getLangFromUrl, useTranslations } from "@/i18n/utils";
import ScreenReader from "@/components/a11y/ScreenReader.astro";

const lang = getLangFromUrl(Astro.url);
const t = useTranslations(lang);

const faqs = [
  { question: t("faq.q1"), answer: t("faq.a1") },
  { question: t("faq.q2"), answer: t("faq.a2") },
  { question: t("faq.q3"), answer: t("faq.a3") },
  { question: t("faq.q4"), answer: t("faq.a4") },
  { question: t("faq.q5"), answer: t("faq.a5") },
  { question: t("faq.q6"), answer: t("faq.a6") },
  { question: t("faq.q7"), answer: t("faq.a7") },
  { question: t("faq.q8"), answer: t("faq.a8") },
];

// 定义状态消息
const messages = {
  expanded: "问题已展开，按 Enter 键收起",
  collapsed: "问题已收起，按 Enter 键展开",
} as const;
---

<section id="faq" class="faq-section" aria-labelledby="faq-title">
  <div class="container">
    <div class="faq-header">
      <h2 id="faq-title">{t("faq.title")}</h2>
      <p id="faq-description">{t("faq.subtitle")}</p>
    </div>
    <div
      class="faq-grid"
      role="region"
      aria-labelledby="faq-title"
      aria-describedby="faq-description"
    >
      {
        faqs.map((faq, index) => (
          <details class="faq-item" data-index={index}>
            <summary
              class="faq-summary"
              role="button"
              aria-expanded="false"
              aria-controls={`faq-answer-${index}`}
              tabindex="0"
              id={`faq-question-${index}`}
            >
              <span class="faq-question">{faq.question}</span>
              <span class="faq-icon" aria-hidden="true" />
            </summary>
            <div
              id={`faq-answer-${index}`}
              class="faq-answer"
              role="region"
              aria-labelledby={`faq-question-${index}`}
            >
              <p>{faq.answer}</p>
            </div>
          </details>
        ))
      }
    </div>
  </div>
  <ScreenReader id="faq-announcer" />
</section>

<style>
  .faq-section {
    padding: 4rem 0 6rem;
    background: var(--color-background);
    margin-bottom: 0;
  }

  .container {
    width: 100%;
    max-width: 1200px;
    margin: 0 auto;
    padding: 0 1rem;
  }

  .faq-header {
    text-align: center;
    margin-bottom: 3rem;
  }

  .faq-header h2 {
    font-size: clamp(2rem, 4vw, 3rem);
    margin-bottom: 1rem;
    background: linear-gradient(
      to right,
      var(--color-primary),
      var(--color-accent)
    );
    -webkit-background-clip: text;
    -webkit-text-fill-color: transparent;
  }

  .faq-header p {
    font-size: clamp(1rem, 2vw, 1.25rem);
    color: var(--color-text-muted);
  }

  .faq-grid {
    max-width: 800px;
    margin: 0 auto;
    display: grid;
    grid-template-columns: 1fr;
    gap: 1rem;
    padding: 0 1rem;
  }

  .faq-item {
    background: var(--color-background-light);
    border-radius: 0.5rem;
    overflow: hidden;
    border: 1px solid var(--color-border);
    transition: all 0.3s ease;
  }

  .faq-item:hover {
    transform: translateY(-2px);
    box-shadow: 0 8px 16px rgba(0, 0, 0, 0.2);
  }

  .faq-item summary {
    padding: 1.5rem;
    cursor: pointer;
    position: relative;
    list-style: none;
    display: flex;
    align-items: center;
    justify-content: space-between;
    gap: 1rem;
    outline: none;
    background: var(--color-background-light);
    transition: all 0.3s ease;
  }

  .faq-item summary::-webkit-details-marker {
    display: none;
  }

  .faq-item summary:focus-visible {
    background: var(--color-background-lighter);
    outline: 2px solid var(--color-primary);
    outline-offset: 2px;
    box-shadow: 0 0 0 4px rgba(var(--color-primary-rgb), 0.1);
  }

  .faq-item[open] {
    transform: translateY(-2px);
    box-shadow: 0 8px 16px rgba(0, 0, 0, 0.2);
  }

  .faq-item[open] summary {
    background: var(--color-background-lighter);
    border-bottom: 1px solid var(--color-border);
  }

  .faq-question {
    font-weight: 500;
    color: var(--color-text);
    flex: 1;
  }

  .faq-icon {
    width: 20px;
    height: 20px;
    position: relative;
    flex-shrink: 0;
  }

  .faq-icon::before,
  .faq-icon::after {
    content: "";
    position: absolute;
    background: var(--color-primary);
    border-radius: 2px;
  }

  .faq-icon::before {
    width: 2px;
    height: 20px;
    left: 9px;
    top: 0;
  }

  .faq-icon::after {
    width: 20px;
    height: 2px;
    left: 0;
    top: 9px;
  }

  .faq-item[open] .faq-icon::before {
    display: none;
  }

  .faq-answer {
    padding: 0 1.5rem 1.5rem;
    color: var(--color-text-muted);
    line-height: 1.6;
    background: var(--color-background-light);
  }

  @media (max-width: 768px) {
    .faq-section {
      padding: 3rem 0 4rem;
    }

    .faq-header {
      margin-bottom: 2rem;
    }

    .faq-header h2 {
      font-size: clamp(1.5rem, 5vw, 2rem);
    }

    .faq-header p {
      font-size: clamp(0.875rem, 2vw, 1rem);
      padding: 0 1rem;
    }

    .faq-grid {
      padding: 0 0.75rem;
    }

    .faq-item summary {
      padding: 1.25rem;
    }

    .faq-question {
      font-size: 0.9375rem;
    }

    .faq-answer {
      padding: 0 1.25rem 1.25rem;
      font-size: 0.875rem;
    }
  }

  @media (max-width: 480px) {
    .faq-section {
      padding: 2rem 0 3rem;
    }

    .faq-header {
      margin-bottom: 2rem;
    }

    .faq-header h2 {
      font-size: clamp(1.25rem, 4vw, 1.75rem);
    }

    .faq-grid {
      padding: 0 0.75rem;
    }

    .faq-item summary {
      padding: 1rem;
    }

    .faq-question {
      font-size: 0.875rem;
    }

    .faq-answer {
      padding: 0 1rem 1rem;
      font-size: 0.8125rem;
    }
  }
</style>

<script define:vars={{ messages }}>
  class FAQController {
    constructor() {
      this.items = Array.from(document.querySelectorAll(".faq-item"));
      this.announcer = document.getElementById("faq-announcer");
      this.init();
    }

    init() {
      this.items.forEach((item) => {
        const summary = item.querySelector("summary");
        if (!summary) return;

        const index = parseInt(item.dataset.index || "0", 10);

        // 键盘事件处理
        summary.addEventListener("keydown", (e) => {
          switch (e.key) {
            case "Enter":
            case " ":
              e.preventDefault();
              this.toggleItem(item);
              break;
            case "ArrowDown":
              e.preventDefault();
              this.focusNextItem(index);
              break;
            case "ArrowUp":
              e.preventDefault();
              this.focusPreviousItem(index);
              break;
            case "Home":
              e.preventDefault();
              this.focusFirstItem();
              break;
            case "End":
              e.preventDefault();
              this.focusLastItem();
              break;
          }
        });

        // 点击事件处理
        summary.addEventListener("click", (e) => {
          e.preventDefault();
          this.toggleItem(item);
        });
      });
    }

    toggleItem(item) {
      const isOpen = item.hasAttribute("open");
      const summary = item.querySelector("summary");

      if (summary) {
        summary.setAttribute("aria-expanded", (!isOpen).toString());
      }

      if (!isOpen) {
        item.setAttribute("open", "");
        this.announce(messages.expanded);
      } else {
        item.removeAttribute("open");
        this.announce(messages.collapsed);
      }
    }

    focusNextItem(currentIndex) {
      const nextIndex = currentIndex + 1;
      if (nextIndex < this.items.length) {
        const nextSummary = this.items[nextIndex].querySelector("summary");
        if (nextSummary instanceof HTMLElement) {
          nextSummary.focus();
        }
      }
    }

    focusPreviousItem(currentIndex) {
      const prevIndex = currentIndex - 1;
      if (prevIndex >= 0) {
        const prevSummary = this.items[prevIndex].querySelector("summary");
        if (prevSummary instanceof HTMLElement) {
          prevSummary.focus();
        }
      }
    }

    focusFirstItem() {
      const firstSummary = this.items[0]?.querySelector("summary");
      if (firstSummary instanceof HTMLElement) {
        firstSummary.focus();
      }
    }

    focusLastItem() {
      const lastSummary =
        this.items[this.items.length - 1]?.querySelector("summary");
      if (lastSummary instanceof HTMLElement) {
        lastSummary.focus();
      }
    }

    announce(message) {
      if (this.announcer) {
        this.announcer.textContent = message;
      }
    }
  }

  // 初始化控制器
  document.addEventListener("DOMContentLoaded", () => {
    new FAQController();
  });
</script>
